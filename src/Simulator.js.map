{"version":3,"file":"Simulator.js","sourceRoot":"","sources":["Simulator.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,SAAS;IAAtB;QACU,UAAK,GAAU,EAAE,CAAC;QAc1B,iCAAiC;IACnC,CAAC;IAbC,aAAa,CAAC,KAAa;QACzB,IAAI,KAAK,GAAU,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACrE,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,YAAY,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACxD,CAAC;CAGF","sourcesContent":["import { node, graph } from \"../src/Types.js\";\n\nexport class Simulator {\n  private nodes: graph = [];\n\n  generateNodes(count: number): node[] {\n    let nodes: graph = [];\n    for (let i = 0; i < count; i++) {\n      this.nodes.push({ id: `node${i}`, name: `Node ${i}`, x: i, y: i });\n    }\n    return this.nodes;\n  }\n\n  findNodeById(id: string): node | undefined {\n    return this.nodes.find((node: any) => node.id === id);\n  }\n\n  // TODO: Implement all Operations\n}\n"]}