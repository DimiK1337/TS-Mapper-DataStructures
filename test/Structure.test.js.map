{"version":3,"file":"Structure.test.js","sourceRoot":"","sources":["Structure.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAGhD,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,sDAAsD,EAAE,GAAG,EAAE;QACpE,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,IAAI,MAAM,GAAS,CAAC,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,uDAAuD,EAAE,GAAG,EAAE;QACrE,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,IAAI,MAAM,GAAS,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACzD,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Structure } from \"../src/Structure.js\";\nimport { node } from \"../src/Types.js\";\n\ndescribe(\"Given Structure imported\", () => {\n  it(\"then Structure should exist\", () => {\n    expect(Structure).toBeDefined();\n  });\n  describe(\"Given Structure Exists\", () => {\n    it(\"then Structure should have create static member\", () => {\n      expect(Structure.create).toBeDefined();\n    });\n  });\n  describe(\"When Structure.create is called with useTuple = true\", () => {\n    it(\"then it should return a tuple\", () => {\n      let tuple = true;\n      let input = Structure.create(tuple, \"1\", \"John\", 0, 0);\n      let output: node = [\"1\", \"John\", 0, 0];\n      expect(input).toEqual(output);\n    });\n  });\n  describe(\"When Structure.create is called with useTuple = false\", () => {\n    it(\"then it should return an object\", () => {\n      let tuple = false;\n      let input = Structure.create(tuple, \"1\", \"John\", 0, 0);\n      let output: node = { id: \"1\", name: \"John\", x: 0, y: 0 };\n      expect(input).toEqual(output);\n    });\n  });\n});\n"]}